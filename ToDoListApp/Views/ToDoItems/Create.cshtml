@model ToDoListApp.Models.TodoItem
@using System.Security.Claims

<h2>Create New To-Do Item</h2>

<form id="createTodoForm" method="post">
    <div class="form-group">
        <label asp-for="Title" class="control-label"></label>
        <input asp-for="Title" class="form-control" id="title" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Description" class="control-label"></label>
        <textarea asp-for="Description" class="form-control" id="description"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="IsCompleted" class="control-label"></label>
        <input asp-for="IsCompleted" type="checkbox" id="isCompleted" />
        <span asp-validation-for="IsCompleted" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="CreatedAt" class="control-label"></label>
        <input asp-for="CreatedAt" class="form-control" type="datetime-local" id="createdAt" />
        <span asp-validation-for="CreatedAt" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="UserId" class="control-label">Email</label>
        <input asp-for="UserId" class="form-control" id="userEmail" type="email" />
        <span asp-validation-for="UserId" class="text-danger"></span>
    </div>
    @*<input type="hidden" id="userEmail" value="@User.Identity.Name)"/> .FindFirstValue(ClaimTypes.NameIdentifier*@
    <button type="submit" class="btn btn-primary">Create</button>
    <a asp-action="Index" class="btn btn-secondary">Back to List</a>
    <div id="error-message" class="text-danger"></div> <!-- Error message element -->
</form>

@section Scripts {
    <!-- jQuery validation and unobtrusive validation scripts -->
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.getElementById("createTodoForm").addEventListener("submit", function (event) {
            event.preventDefault();

            // Retrieve form data
            var token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            var title = document.getElementById("title").value;
            var description = document.getElementById("description").value;
            var isCompleted = document.getElementById("isCompleted").checked;
            var createdAt = document.getElementById("createdAt").value; 
            var userEmail = document.getElementById("userEmail").value;


            // Perform client-side validation here if needed
            // Example: Check if the title is not empty
            if (!title) {
                document.getElementById("error-message").innerText = "Title is required.";
                return;
            }

            // Make a POST request to create a new to-do item
            fetch('/api/CreateTodo', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({
                    title: title,
                    description: description,
                    isCompleted: isCompleted,
                    createdAt: createdAt,
                    userId: userEmail
                })
            })
            .then(response => {
                if (response.ok) {
                    alert("To-do item created successfully!");
                    window.location.href = '/ToDoItems/Index'; // Redirect to the to-do list page
                } else {
                    return response.json().then(data => {
                        throw new Error(data.error || 'Creation failed');
                    });
                }
            })
            .catch(error => {
                document.getElementById("error-message").innerText = error.message; // Display error message
            });
        });
    </script>
}

